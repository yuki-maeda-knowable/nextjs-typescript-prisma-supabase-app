// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String      @id @default(cuid())
  title     String
  content   String?
  published Boolean     @default(false)
  createdAt DateTime    @default(now())
  author    User?       @relation(fields: [authorId], references: [id])
  authorId  String?
  favorites Favorites[]
  comments  Comments[]
  PostTags  PostTags[]
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  favorites     Favorites[]
  comments      Comments[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token        String?
  oauth_token_secret String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id       String   @id @default(cuid())
  nickname String
  gender   Int //1: 女 2:男 3:その他
  birthday DateTime
  Photo    Photo[]
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
}

model Photo {
  id        String  @id @default(cuid())
  Profie    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  url       String?
}

model Favorites {
  id     String @id @default(cuid())
  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  //UserモデルとPostモデルへの接続を定義
  @@unique([userId, postId])
}

model Comments {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

//tag検索機能のためのテーブルを作成。postテーブルを紐づく中間テーブルも作成する
model Tags {
  id       String     @id @default(cuid())
  name     String
  PostTags PostTags[]
}

//中間テーブル
model PostTags {
  id     String @id @default(cuid())
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  Tags   Tags   @relation(fields: [tagsId], references: [id], onDelete: Cascade)
  tagsId String
}
